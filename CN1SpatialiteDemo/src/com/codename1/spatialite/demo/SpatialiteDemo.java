package com.codename1.spatialite.demo;


import com.codename1.db.Cursor;
import com.codename1.db.Database;
import com.codename1.db.Row;
import com.codename1.io.File;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.spatialite.SpatialiteDB;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class SpatialiteDemo {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);
    }
    
    public void start()  {
        if(current != null){
            current.show();
            return;
        }
        Form hi = new Form("Hi World", BoxLayout.y());
        hi.add(new Label("Hi World"));
        
        try {
            
            //Database db = Database.openOrCreate("Test.db");
            
            //db.execute("SELECT load_extension('mod_spatialite.dylib')");
            //String sql = "SELECT InitSpatialMetadata()";
            //db.execute(sql);
            if (SpatialiteDB.exists("Test.db")) {
                SpatialiteDB.delete("Test.db");
            }
            SpatialiteDB db = SpatialiteDB.openOrCreate("Test.db");
            // creating a POINT table
            
            String sql = "CREATE TABLE test_pt (";
            sql += "id INTEGER NOT NULL PRIMARY KEY,";
            sql += "name TEXT NOT NULL)";
            db.execute(sql);
            // creating a POINT Geometry column
            sql = "SELECT AddGeometryColumn('test_pt', ";
            sql += "'geom', 4326, 'POINT', 'XY')";
            db.execute(sql);

            // creating a LINESTRING table
            sql = "CREATE TABLE test_ln (";
            sql += "id INTEGER NOT NULL PRIMARY KEY,";
            sql += "name TEXT NOT NULL)";
            db.execute(sql);
            // creating a LINESTRING Geometry column
            sql = "SELECT AddGeometryColumn('test_ln', ";
            sql += "'geom', 4326, 'LINESTRING', 'XY')";
            db.execute(sql);

            
            // creating a POLYGON table
            sql = "CREATE TABLE test_pg (";
            sql += "id INTEGER NOT NULL PRIMARY KEY,";
            sql += "name TEXT NOT NULL)";
            db.execute(sql);
            // creating a POLYGON Geometry column
            sql = "SELECT AddGeometryColumn('test_pg', ";
            sql += "'geom', 4326, 'POLYGON', 'XY')";
            db.execute(sql);

      
            int i;
            for (i = 0; i < 100; i++)
            {
                Log.p("Inserting point "+i);
              // for POINTs we'll use full text sql statements
              sql = "INSERT INTO test_pt (id, name, geom) VALUES (";
              sql += i + 1;
              sql += ", 'test POINT #";
              sql += i + 1;
              sql += "', GeomFromText('POINT(";
              sql += i / 1000.0;
              sql += " ";
              sql += i / 1000.0;
              sql += ")', 4326))";
              db.execute(sql);
            }
            

      // checking POINTs
      sql = "SELECT DISTINCT Count(*), ST_GeometryType(geom), ";
      sql += "ST_Srid(geom) FROM test_pt";
      Cursor rs = db.executeQuery(sql);
      while(rs.next())
      {
          Row row = rs.getRow();
        // read the result set
        String msg = "> Inserted ";
        msg += row.getInteger(0);
        msg += " entities of type ";
        msg += row.getString(1);
        msg += " SRID=";
        msg += row.getInteger(2);
        System.out.println(msg);
      }

      // inserting some LINESTRINGs
      // this time we'll use a Prepared Statement
      sql = "INSERT INTO test_ln (id, name, geom) ";
      sql += "VALUES (?, ?, GeomFromText(?, 4326))";
      
      //PreparedStatement ins_stmt = conn.prepareStatement(sql);
      //conn.setAutoCommit(false);
      for (i = 0; i < 100; i++)
      {
        // setting up values / binding
        String name = "test LINESTRING #";
        name += i + 1;
        String geom = "LINESTRING (";
        if ((i%2) == 1)
        {
          // odd row: five points
          geom += "-180.0 -90.0, ";
          geom += -10.0 - (i / 1000.0);
          geom += " ";
          geom += -10.0 - (i / 1000.0);
          geom += ", ";
          geom += -10.0 - (i / 1000.0);
          geom += " ";
          geom += 10.0 + (i / 1000.0);
          geom += ", ";
          geom += 10.0 + (i / 1000.0);
          geom += " ";
          geom += 10.0 + (i / 1000.0);
          geom += ", 180.0 90.0";
        }
        else
        {
          // even row: two points
          geom += -10.0 - (i / 1000.0);
          geom += " ";
          geom += -10.0 - (i / 1000.0);
          geom += ", ";
          geom += 10.0 + (i / 1000.0);
          geom += " ";
          geom += 10.0 + (i / 1000.0);
        }
        geom += ")";
        db.execute(sql, i+1, name, geom);
        //ins_stmt.setInt(1, i+1);
        //ins_stmt.setString(2, name);
        //ins_stmt.setString(3, geom);
        //ins_stmt.executeUpdate();
      }
      //conn.commit();

      // checking LINESTRINGs
      sql = "SELECT DISTINCT Count(*), ST_GeometryType(geom), ";
      sql += "ST_Srid(geom) FROM test_ln";
      rs = db.executeQuery(sql);
      while(rs.next())
      {
          Row row = rs.getRow();
        // read the result set
        String msg = "> Inserted ";
        msg += row.getInteger(0);
        msg += " entities of type ";
        msg += row.getString(1);
        msg += " SRID=";
        msg += row.getInteger(2);
        System.out.println(msg);
      }
      rs.close();

      // inserting some POLYGONs
      // this time too we'll use a Prepared Statement
      sql = "INSERT INTO test_pg (id, name, geom) ";
      sql += "VALUES (?, ?, GeomFromText(?, 4326))";
      //ins_stmt = conn.prepareStatement(sql);
      //conn.setAutoCommit(false);
      for (i = 0; i < 100; i++)
      {
        // setting up values / binding
        String name = "test POLYGON #";
        name += i + 1;
        //ins_stmt.setInt(1, i+1);
        //ins_stmt.setString(2, name);
        String geom = "POLYGON((";
        geom += -10.0 - (i / 1000.0);
        geom += " ";
        geom += -10.0 - (i / 1000.0);
        geom += ", ";
        geom += 10.0 + (i / 1000.0);
        geom += " ";
        geom += -10.0 - (i / 1000.0);
        geom += ", ";
        geom += 10.0 + (i / 1000.0);
        geom += " ";
        geom += 10.0 + (i / 1000.0);
        geom += ", ";
        geom += -10.0 - (i / 1000.0);
        geom += " ";
        geom += 10.0 + (i / 1000.0);
        geom += ", ";
        geom += -10.0 - (i / 1000.0);
        geom += " ";
        geom += -10.0 - (i / 1000.0);
        geom += "))";
        db.execute(sql, i+1, name, geom);
        //ins_stmt.setInt(1, i+1);
        //ins_stmt.setString(2, name);
        //ins_stmt.setString(3, geom);
        //ins_stmt.executeUpdate();
      }
      //conn.commit();

      // checking POLYGONs
      sql = "SELECT DISTINCT Count(*), ST_GeometryType(geom), ";
      sql += "ST_Srid(geom) FROM test_pg";
      rs = db.executeQuery(sql);
      while(rs.next())
      {
          Row row = rs.getRow();
        // read the result set
        String msg = "> Inserted ";
        msg += row.getInteger(0);
        msg += " entities of type ";
        msg += row.getString(1);
        msg += " SRID=";
        msg += row.getInteger(2);
        System.out.println(msg);
      }
      rs.close();
        } catch (Throwable t) {
            Log.e(t);
        }
        
        
        
        hi.show();
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }

}
